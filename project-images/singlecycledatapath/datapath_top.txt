`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: Majid Sabbagh (sabbagh.m@husky.neu.edu)
// 
// Create Date: 08/17/2014 02:18:36 PM
// Design Name: 
// Module Name: eightbit_alu_top
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
module pdatapath_top(
        input wire clk,
		input wire top_pb_clk,
        input wire rst_general,
		output [3:0] disp_en,
		output [6:0] seg7_output
    );
	
	wire [7:0] alu_1st_input, alu_2nd_input;
    wire [7:0] alu_output;
    wire [2:0] ALUOp;
    wire       alu_ovf_flag;
    wire       alu_take_branch_output;
	
    
    wire [15:0] instruction;
    //insturction fields
    wire [3:0] opcode;
    wire [1:0] rs_addr;
    wire [1:0] rt_addr;
    wire [1:0] rd_addr;
    wire [7:0] immediate;
    //control signals
    wire RegDst;
    wire RegWrite;
    wire ALUSrc1;
    wire ALUSrc2;
    wire MemWrite;
    wire MemToReg;

    wire [1:0] regfile_write_address;//destination register address
    wire [8:0] regfile_write_data;//result data
    wire [8:0] read_data1;//source register1 data
    wire [8:0] read_data2;//source register2 data

    wire [8:0] alu_result;
    wire [7:0] zero_register;
    wire [8:0] data_mem_out;

    wire pb_clk_debounced;
	wire [7:0] pc;

	assign zero_register = 8'b0;//ZERO constant
	assign alu_result = {alu_ovf_flag, alu_output};


		// Debounce
		debounce debounce_clk(
						.clk_in(clk),
						.rst_in(rst_general),
						.sig_in(top_pb_clk),
						.sig_debounced_out(pb_clk_debounced)
						);		
  
		// 7-Segment display module
	   	Adaptor_display display(.clk(clk), 				// system clock
							.input_value(alu_output),		// 8-bit input [7:0] value to display
							.disp_en(disp_en),			// output [3:0] 7 segment display enable
							.seg7_output(seg7_output));		// output [6:0] 7 segment signals

		  instr_mem myinst_mem (
  .a(pc),      // input wire [7 : 0] a
  .spo(instruction)  // output wire [15 : 0] spo
);
pc_count mycounter(.clk(pb_clk_debounced), .reset(rst_general), .imm(immediate), .branch(alu_take_branch_output), .pc(pc));
   	//**********Instantiate Your instruction decoder here**********//
InstructionDecoder mydecoder (instruction,opcode, rs_addr, rt_addr, rd_addr, immediate, RegDst, RegWrite, ALUSrc1, ALUSrc2, ALUOp, MemWrite, MemToReg);


        
    
    
    assign zero_register = 8'b0;//ZERO constant          

	
	
	
 alu myEightbitAlu (.a(alu_1st_input), .b(alu_2nd_input), .sel(ALUOp), .f(alu_output),.ovf(alu_ovf_flag), .take_branch(alu_take_branch_output));

    reg_file myRegFile(.clk(pb_clk_debounced), .rst(rst_general), .rd0_addr(rs_addr), .rd1_addr(rt_addr), .wr_en(RegWrite),.wr_addr(regfile_write_address), .wr_data(regfile_write_data), .rd0_data(read_data1), .rd1_data(read_data2));
 	mux myMux1 (.in0(read_data1), .in1(zero_register), .select(ALUSrc1), .out(alu_1st_input));
 	mux myMux2 (.in0(read_data2), .in1(immediate), .select(ALUSrc2), .out(alu_2nd_input));
 	//Instantiate Your data memory here
	data_memory myMemory (.Clk(pb_clk_debounced), .rst(rst_general), .wr_addr(alu_output), .wr_data(read_data2), .wr_en(MemWrite), .rd0_data(data_mem_out));
	//Mux for regfile_writedata
	muxwritedata myMux3 (.in0(alu_output), .in1(data_mem_out), .select(MemToReg), .out(regfile_write_data));
	//Mux for RegDST
    muxrtrd myMux4 (.in0(rt_addr), .in1(rd_addr),.select(RegDst), .out(regfile_write_address));
    
    vio_0 my_vio1 (
  .clk(clk),                // input wire clk
  .probe_in0(alu_output),    // input wire [7 : 0] probe_in0
  .probe_in1(alu_ovf_flag),    // input wire [0 : 0] probe_in1
  .probe_in2(alu_take_branch_output),    // input wire [0 : 0] probe_in2
  .probe_in3(read_data1),    // input wire [7 : 0] probe_in3
  .probe_in4(read_data2),    // input wire [7 : 0] probe_in4
  .probe_in5(alu_1st_input),    // input wire [7 : 0] probe_in5
  .probe_in6(alu_2nd_input),    // input wire [8 : 0] probe_in6
  .probe_in7(regfile_write_data),    // input wire [8 : 0] probe_in7
  .probe_in8(data_mem_out),    // input wire [8 : 0] probe_in8
  .probe_in9(opcode),    // input wire [3 : 0] probe_in9
  .probe_in10(rs_addr),  // input wire [1 : 0] probe_in10
  .probe_in11(rt_addr),  // input wire [1 : 0] probe_in11
  .probe_in12(rd_addr),  // input wire [1 : 0] probe_in12
  .probe_in13(immediate),  // input wire [7 : 0] probe_in13
  .probe_in14(RegDst),  // input wire [0 : 0] probe_in14
  .probe_in15(RegWrite),  // input wire [0 : 0] probe_in15
  .probe_in16(ALUSrc1),  // input wire [0 : 0] probe_in16
  .probe_in17(ALUSrc2),  // input wire [0 : 0] probe_in17
  .probe_in18(ALUOp),  // input wire [2 : 0] probe_in18
  .probe_in19(MemWrite),  // input wire [0 : 0] probe_in19
  .probe_in20(MemToReg),  // input wire [0 : 0] probe_in20
  .probe_in21(pc),  // input wire [7 : 0] probe_in21
  .probe_in22(instruction)  // input wire [15 : 0] probe_in22
);

    
    
endmodule